
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const deepseekApiKey = Deno.env.get('DEEPSEEK_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Iniciando fun√ß√£o de an√°lise facial...');
    
    if (!deepseekApiKey) {
      console.error('‚ùå Chave da API DeepSeek n√£o configurada');
      return new Response(
        JSON.stringify({ error: 'Chave da API DeepSeek n√£o configurada' }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const requestData = await req.json();
    const { imageData, frameWidth } = requestData;

    if (!imageData) {
      console.error('‚ùå ImageData n√£o fornecido');
      return new Response(
        JSON.stringify({ error: 'imageData √© obrigat√≥rio' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const adjustedFrameWidth = frameWidth || 50;
    console.log('üìè Largura da arma√ß√£o:', adjustedFrameWidth);

    // Simplificar processamento da imagem
    let processedImage = imageData;
    if (!imageData.startsWith('data:image')) {
      processedImage = `data:image/jpeg;base64,${imageData}`;
    }

    // Encurtar drasticamente a imagem se for muito grande
    if (processedImage.length > 50000) {
      console.log('üîÑ Comprimindo imagem drasticamente...');
      const base64Part = processedImage.split(',')[1] || processedImage;
      const compressedData = base64Part.substring(0, 30000);
      processedImage = `data:image/jpeg;base64,${compressedData}`;
    }
    
    console.log('ü§ñ Chamando DeepSeek API...');

    const requestBody = {
      model: 'deepseek-chat',
      messages: [
        {
          role: 'user',
          content: `Analise esta imagem para medi√ß√µes de √≥culos. Largura da arma√ß√£o: ${adjustedFrameWidth}mm.

IMPORTANTE: Se a pessoa N√ÉO estiver usando √≥culos, defina "temOculos": false e N√ÉO inclua alturaEsquerda e alturaDireita no JSON.

Retorne apenas JSON v√°lido com esta estrutura:

Se COM √≥culos:
{
  "dpBinocular": 62,
  "dnpEsquerda": 31, 
  "dnpDireita": 31,
  "alturaEsquerda": 20,
  "alturaDireita": 20,
  "larguraLente": 25,
  "confiabilidade": 0.8,
  "temOculos": true,
  "observacoes": "An√°lise com √≥culos"
}

Se SEM √≥culos:
{
  "dpBinocular": 62,
  "dnpEsquerda": 31, 
  "dnpDireita": 31,
  "larguraLente": 25,
  "confiabilidade": 0.8,
  "temOculos": false,
  "observacoes": "An√°lise sem √≥culos"
}

Imagem: ${processedImage}`
        }
      ],
      max_tokens: 300,
      temperature: 0.1
    };

    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${deepseekApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      console.error('‚ùå Erro do DeepSeek:', response.status);
      
      // Retornar medidas padr√£o SEM √≥culos em caso de erro
      const defaultMeasurements = {
        dpBinocular: 62,
        dnpEsquerda: 31,
        dnpDireita: 31,
        larguraLente: adjustedFrameWidth / 2,
        confiabilidade: 0.5,
        temOculos: false,
        observacoes: 'Medidas padr√£o - erro na an√°lise autom√°tica'
      };

      return new Response(
        JSON.stringify({ measurements: defaultMeasurements }), 
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const data = await response.json();
    console.log('‚úÖ Resposta do DeepSeek recebida');
    
    if (!data.choices?.[0]?.message?.content) {
      console.error('‚ùå Resposta inv√°lida do DeepSeek');
      
      // Retornar medidas padr√£o SEM √≥culos
      const defaultMeasurements = {
        dpBinocular: 62,
        dnpEsquerda: 31,
        dnpDireita: 31,
        larguraLente: adjustedFrameWidth / 2,
        confiabilidade: 0.5,
        temOculos: false,
        observacoes: 'Medidas padr√£o - resposta inv√°lida da IA'
      };

      return new Response(
        JSON.stringify({ measurements: defaultMeasurements }), 
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    const content = data.choices[0].message.content;

    // Tentar extrair JSON da resposta
    let measurements;
    try {
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        measurements = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('JSON n√£o encontrado');
      }
    } catch (parseError) {
      console.error('‚ùå Erro ao parsear JSON, usando medidas padr√£o');
      
      measurements = {
        dpBinocular: 62,
        dnpEsquerda: 31,
        dnpDireita: 31,
        larguraLente: adjustedFrameWidth / 2,
        confiabilidade: 0.5,
        temOculos: false,
        observacoes: 'Medidas padr√£o - erro no processamento da resposta'
      };
    }

    // Validar e garantir valores seguros baseado se tem √≥culos ou n√£o
    const temOculos = Boolean(measurements.temOculos);
    
    let validatedMeasurements = {
      dpBinocular: Number(measurements.dpBinocular) || 62,
      dnpEsquerda: Number(measurements.dnpEsquerda) || 31,
      dnpDireita: Number(measurements.dnpDireita) || 31,
      larguraLente: Number(measurements.larguraLente) || adjustedFrameWidth / 2,
      confiabilidade: Number(measurements.confiabilidade) || 0.8,
      temOculos: temOculos,
      observacoes: measurements.observacoes || 'Medi√ß√µes calculadas automaticamente'
    };

    // Adicionar alturas apenas se a pessoa estiver usando √≥culos
    if (temOculos) {
      validatedMeasurements.alturaEsquerda = Number(measurements.alturaEsquerda) || 20;
      validatedMeasurements.alturaDireita = Number(measurements.alturaDireita) || 20;
    }

    console.log('üéØ Retornando medidas:', validatedMeasurements);

    return new Response(
      JSON.stringify({ measurements: validatedMeasurements }), 
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('üí• Erro geral na fun√ß√£o:', error);
    
    // Sempre retornar medidas padr√£o SEM √≥culos em caso de erro cr√≠tico
    const emergencyMeasurements = {
      dpBinocular: 62,
      dnpEsquerda: 31,
      dnpDireita: 31,
      larguraLente: 25,
      confiabilidade: 0.5,
      temOculos: false,
      observacoes: 'Medidas padr√£o - erro cr√≠tico na an√°lise'
    };

    return new Response(
      JSON.stringify({ measurements: emergencyMeasurements }), 
      { 
        status: 200, // Retornar 200 mesmo com erro para evitar 502
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
